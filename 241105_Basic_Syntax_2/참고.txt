<computed 주의사항>
 1. computed의 반환 값은 변경하지 말 것
  - computed의 반환 값은 의존하는 데이터의 파생된 값
   - 이미 의존하는 데이터에 의해 계산이 완료된 값
  
  - 일종의 snapshot이며 의존하는 데이터가 변경될 때만 새 snapshot이 생성됨

  - 계산된 값은 읽기 전용으로 취급되어야 하며 변경되어서는 안됨

  - 대신 새 값을 얻기 위해서는 의존하는 데이터를 업데이트 해야 함

 2. computed 사용 시 원본 배열을 변경하지 말 것
  - computed에서 reverse() 및 sort() 사용시 원본 배열을 변경하기 때문에
    원본 배열의 복사본을 만들어서 진행 해야함


<Lifecycle Hook 주의사항>
 Lifecycle Hooks는 동기적으로 작성할 것
  1. 컴포넌트 상태의 일관성 유지
   - 컴포넌트의 생명주기 동안 상태가 예측 가능하고 일관되게 유지되도록 보장 
   - 비동기적으로 실행될 경우, 컴포넌트의 상태가 예상치 못한 시점에 변경될 수 있어 
     버그 발생 가능성이 높아짐

  2. Vue 내부 메커니즘과의 동기화
   - Vue의 내부 로직은 컴포넌트의 라이프사이클에 맞춰 최적화되어 있음
   - 동기적 실행을 통해 Vue의 내부 프로세스와 개발자가 작성한 코드가 정확히 동기화될 수 있음


<배열과 v-for 관련>
 - v-for와 배열을 함께 사용 시 배열의 메서드를 주의해서 사용해야 함

 1. 변화 메서드
  - 호출하는 원본 배열을 변경
  - push(), pop(), shift(), unshift(), splice(), sort(), reverse()

 2. 배열 교체
  - 원본 배열을 수정하지 않고 항상 새 배열을 반환
  - filter(), concat(), slice()


 - v-for와 배열을 활용해 "필터링/정렬" 활용하기
  - 원본 데이터를 수정하거나 교체하지 않고 필터링하거나 정렬된 새로운 데이터를 표시하는 방법
   1. computed 활용 (예시: 86p)
   2. method 활용 (computed가 불가능한 중첩된 v-for에 경우 사용) (예시: 87p)


 - 배열의 인덱스를 v-for의 key로 사용하지 말 것
  - 인덱스는 식별자가 아닌 배열의 항목 위치만 나타내기 때문
  - 만약 새 요소가 배열의 끝이 아닌 위치 삽입되면 이미 반복된 구성 요소 데이터가 함께 업데이트되지 않기 때문
  -> 직접 고유한 값을 만들어내는 메서드를 만들거나 외부 라이브러리 등을 활용하는 등 식별자 역할을 할 수 있는 값을 만들어 사용

*) 실습코드 99.todos는 배운 것 다 구현해놓은 것이니 보고 공부하면 좋을 듯