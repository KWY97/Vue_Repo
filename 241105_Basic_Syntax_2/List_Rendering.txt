<List Rendering>

v-for
 - 소스 데이터를 기반으로 요소 또는 템플릿 블록을 여러 번 렌더링
  *) 소스 데이터: Array, Object, Number, String, Iterable

 - 구조 
  - v-for는 alias in expression 형식의 특수 구문을 사용
  - !! 인덱스(객체에서는 key)에 대한 별칭을 지정할 수 있음 !! - 순서 주의
   - <div v-for="(item, index) in arr">

   - <div v-for="value in object">
   - <div v-for="(value, key) in object">
   - <div v-for="(value, key, index) in object">

  (예시: 교재 35p ~ 39p, 실습코드 03보며 공부하면 될 듯)


[v-for 주의 사항]

 1. v-for with key (실습코드 04)
  - 반드시 v-for와 key를 함께 사용한다.
  - 내부 컴포넌트 상태를 일관되게 하여 데이터의 예측 가능한 행동을 유지하기 위함
  - key는 반드시 각 요소에 대한 !!! 고유한 값 !!! 을 나타낼 수 있는 식별자여야 함
  - 우리가 보는 것에는 문제가 없으나 내부적으로 문제가 발생할 수 있고, 성능차이도 많이 난다고함.
 
  ```
  <!-- 
       "올바른 key 사용법"
 
       1. 권장되는 key 값
       - 데이터베이스의 고유 ID
       - 항목의 고유한 식별자
       - 변경되지 않는 속성 값

       2. 피해야 할 사항
       - 배열의 인덱스를 key로 사용하는 것
       - 객체를 key로 사용하는 것
     -->

     <!-- Maintaining State with key -->
     <!-- key 속성은 Vue의 내부 Virtual DOM 알고리즘이 노드를 식별하는 데 필수적인 힌트를 제공 -->
     <!-- 에러가 발생하지 않더라도 key 속성을 사용하는 것이 Vue 애플리케이션의 안정성과 성능을 위해 매우 중요 -->
     <div v-for="item in items" :key="item.id">
       {{ item.name }}
     </div>
  ```

  - 내장 특수 속성 'key'
   - number 혹은 string으로만 사용해야 함 !!
   - Vue의 내부 가상 DOM 알고리즘이 이전 목록과 새 노드 목록을 비교할 때 각 node를 식별하는 용도로 사용
   -> Vue 내부 동작 관련된 부분이기에 최대한 작성하려고 노력할 것


 2. v-for with v-if 
  - 동일 요소에 v-for와 v-if를 함께 사용하지 않는다.
  - 동일한 요소에서 v-if가 v-for보다 우선순위가 더 높기 때문 (반복이 돌기 전에 조건먼저 본다는 말)
  -> v-if에서의 조건은 v-for 범위의 변수에 접근할 수 없음 (실습코드 05 - Bad case)

  -> So, 다른 방법으로 우회 해야함 (실습 코드 05보면서 공부하면 됨)
  1. computed 활용
   - computed를 활용해 이미 필터링된 목록을 반환 하도록 설정
     (반복 먼저 따로 시키고 그걸로 if문 적용시키겠다.)

  2. v-for와 <template> 요소 활용
   - v-for와 template 요소를 사용하여 v-if 위치를 이동