<Virtual DOM>
 - 가상의 DOM을 메모리에 저장하고 실제 DOM과 동기화하는 프로그래밍 개념
 - 실제 DOM과의 변경 사항 비교를 통해 변경된 부분만 실제 DOM에 적용하는 방식
 - 웹 애플리케이션의 성능을 향상시키기 위한 Vue의 내부 렌더링 기술


 - Virtual DOM 패턴의 장점 (참고 정도로만 읽으면 된다.)
  - 효율성
   - 실제 DOM 조작을 최소화하고, 변경된 부분만 업데이트하여 성능을 향상

  - 반응성
   - 데이터의 변경을 감지하고, Virtual DOM을 효율적으로 갱신하여 UI를 자동으로 업데이트

  - 추상화
   - 개발자는 실제 DOM 조작을 Vue에게 맡기고 컴포넌트와 템플릿을 활용하는
     추상화된 프로그래밍 방식으로 원하는 UI 구조를 구성하고 관리할 수 있음

  
 - Virtual DOM 주의사항
  - 실제 DOM에 직접 접근하지 말 것
   - JavaScript에서 사용하는 DOM 접근 관련 메서드 사용 금지
     (querySelector, createElement, addEventListener 등)

  => Vue의 ref()와 Lifecycle Hooks 함수를 사용해 간접적으로 접근하여 조작할 것


<Composition API & Option API>

Vue를 작성하는 2가지 스타일
 - Composition API (Vue3의 권장방식 - Vue3는 Option API 방식도 가능하긴한데 권장하진 않는다고 함)
  - import해서 가져온 API 함수들을 사용하여 컴포넌트의 로직을 정의 (75p)

 - Option API (Vue2에서 쓰던 방식, Vue3에서도 지원)
  - data, methods 및 method 같은 객체를 사용하여 컴포넌트의 로직을 정의


API별 권장 사항
 - Composition API + SFC 
  - 규모가 있는 앱의 전체를 구축하려는 경우 
  
 - Option API 
  - 빌드 도구를 사용하지 않거나 복잡성이 낮은 프로젝트에서 사용하려는 경우