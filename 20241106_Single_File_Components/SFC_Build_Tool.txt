<SFC Build Tool>

Vite (비트)
 - 프론트 엔드 개발 도구
 => 빠른 개발 환경을 위한 빌드 도구와 개발 서버를 제공

 - Build
  - 프로젝트의 소스 코드를 최적화하고 번들링하여 배포할 수 있는 형식으로 변환하는 과정
  - 개발 중에 사용되는 여러 소스 파일 및 리소스(JavaScript, CSS, 이미지 등)를 
    최적화된 형태로 조합하여 최종 소프트웨어 제품을 생성하는 것
  => Vite는 이러한 빌드 프로세스를 수행하는 데 사용되는 도구

 - Vue Project 생성 (교재: 23p ~ 29p)
  1. npm create vue@latest
  2. cd vue-project
  3. npm install (!! node_modules와 package-lock.json이 생긴다 !!)
  4. npm run dev


 - NPM (Node Package Manager) (파이썬의 pip라고 생각하면됨)
  - Node.js의 기본 패키지 관리자
  - Chrome의 V8 JavaScript 엔진을 기반으로 하는 Server-Side 실행 환경

  - Node.js의 영향
   - 기존에 브라우저 안에서만 동작할 수 있었던 JavaScript를
     브라우저가 아닌 서버 측에서도 실행할 수 있게함
     => 프론트엔드와 백엔드에서 동일한 언어로 개발할 수 있게됨

   - NPM을 활용해 수많은 오픈 소스 패키지와 라이브러리를 제공하여 개발자들이
     손쉽게 코드를 공유하고 재사용할 수 있게함

 - Module
  - 프로그램을 구성하는 독립적인 코드 블록 (*.js 파일)
  
  - 필요성
   - 개발하는 애플리케이션의 크기가 커지고 복잡해지면서 파일 하나에 모든 기능을 담기가 어려워 짐
   - 따라서 자연스럽게 파일을 여러 개로 분리하여 관리를 하게 되었고, 이때 분리된 각 파일이 바로 모듈(module)
   => *.js 파일 하나가 하나의 모듈

  - 한계
   - 하지만 애플리케이션이 점점 더 발전함에 따라 처리해야 하는 JavaScript 모듈의 개수도 극적으로 증가
   - 이러한 상황에서 성능 병목 현상이 발생하고 모듈 간의 의존성(연결성)이 깊어지면서 특정한 곳에서 발생한 문제가 어떤 모듈 간의 문제인지 파악하기 어려워 짐
   - 복잡하고 깊은 모듈 간 의존성 문제를 해결하기 위한 도구가 필요 => Bundler 사용

 - Bundler
  - 여러 모듈과 파일을 하나(혹은 여러 개)의 번들로 묶어 최적화하여 애플리케이션에서 사용할 수 있게 만들어주는 도구

  - 역할
   - 의존성 관리, 코드 최적화, 리소스 관리 등
   - Bundler가 하는 작업을 Bundling이라고함

   => [참고] Vite는 Rollup이라는 Bundler를 사용하며 개발자가 별도로 기타 환경설정에
             신경쓰지 않도록 모두 설정해두고 있음


<Vue Project 구조> (43p ~ 53p)

 - node_modules
  - Node.js 프로젝트에서 사용되는 외부 패키지들이 저장되는 디렉토리
  - 프로젝트의 의존성 모듈을 저장하고 관리하는 공간
  - 프로젝트가 실행될 때 필요한 라이브러리와 패키지들을 포함
  - .gitignore에 작성됨


 - package-lock.json
  - 패키지들의 실제 설치 버전, 의존성 관계, 하위 패키지 등을 포함하여 패키지 설치에 필요한 모든 정보를 포함
  - 패키지들의 ! 정확한 버전 !을 보장하여, 여러 개발자가 협업하거나 서버 환경에서 일관성 있는 의존성을 유지하는데 도움을 줌
  - npm install 명령을 통해 패키지를 설치할 때, 명시된 버전과 의존성을 기반으로 설치


 - package.json (package-lock.json과 달리 '버전'이 아닌 '범위')
  - 프로젝트의 메타 정보와 의존성 패키지 목록을 포함
  - 프로젝트의 이름, 버전, 작성자, 라이선스 등과 같은 메타 정보를 정의
  => package-lock.json과 함께 프로젝트의 의존성을 관리하고, 버전 충돌 및 일관성을 유지하는 역할


 - public 디렉토리
  - 주로 다음 정적 파일을 위치 시킴
   - 소스코드에서 참조되지 않는
   - 항상 같은 이름을 갖는
   - import할 필요 없는

  - 항상 root 절대 경로를 사용하여 참조
   - public/icon.png는 소스 코드에서 /icon.png로 참조할 수 있음


 - !!! src 디렉토리 !!! - 핵심
  - 프로젝트의 주요 소스 코드를 포함하는 곳
  - 컴포넌트, 스타일, 라우팅 등 프로젝트의 핵심 코드를 관리

  - src/assets
   - 프로젝트 내에서 사용되는 자원(이미, 폰트, 스타일 시트)을 관리
   - 컴포넌트 자체에서 참조하는 내부 파일을 저장하는데 사용
   - 컴포넌트가 아닌 곳에서는 public 디렉토리에 위치한 파일을 사용

  - src/components
   - Vue 컴포넌트들을 작성하는 곳

  - src/App.vue
   - Vue 앱의 최상위 Root 컴포넌트
   - 다른 하위 컴포넌트들을 포함
   - 애플리케이션 전체의 레이아웃과 공통적인 요소를 정의

  - src/main.js
   - Vue 인스턴스를 생성하고, 애플리케이션을 초기화하는 역할
   - 필요한 라이브러리를 import하고 전역 설정을 수행


 - index.html
  - Vue 앱의 기본 HTML파일
  - 앱의 진입점 (entry point)
  - Root 컴포넌트인 App.vue가 해당 페이지에 마운트(mount)됨 => Vue앱이 SPA인 이유

  - 필요한 스타일 시트, 스크립트 등의 외부 리소스를 로드할 수 있음 (ex. bootstrap CDN)


 - 기타 설정 파일 (프로젝트하면서 우리가 다룰 일은 없다고함)
  - jsconfig.json
   - 컴파일 옵션, 모듈 시스템 등 설정

  - vite.config.js
   - Vite 프로젝트 설정 파일
   - 플러그인, 빌드 옵션, 개발 서버 설정 등
  
  
<Vue Component> (56p ~ 64p)

컴포넌트 사용 2단계
 1. 컴포넌트 파일 생성
 2. 컴포넌트 등록 (import)

 ```
 // @는 src를 뜻하는 약어
 import MyComponent from '@/components/MyComponent.vue';
 ```

컴포넌트 이름 지정 스타일 가이드 (우선순위 B 규칙: 강력히 권장)
 (https://ko.vuejs.org/style-guide/rules-strongly-recommended)
 => 직접 Bad, Good 예시 직접 보고 비교하면서 읽어보면 이해 잘 될 듯

 - 싱글 파일 컴포넌트의 파일명은 항상 파스칼 케이스이거나 항상 케밥 케이스여야 한다.
   (우리는 파스칼 케이스로 쭉 쓸 것이다.)

 - 앱별 스타일과 규칙을 적용하는 기본 컴포넌트(프레젠테이션, 덤 또는 순수 컴포넌트라고도 함)는
   모두 Base, App 또는 V와 같은 특정 접두사로 시작해야 한다.

 - 부모 컴포넌트와 긴밀하게 결합된 자식 컴포넌트는 부모 컴포넌트 이름을 접두사로 포함해야 한다.

 - 컴포넌트 이름은 가장 높은 수준의 단어(보통 가장 일반적인 단어)로 시작하고 설명적인 수정 단어로 끝나야 한다.