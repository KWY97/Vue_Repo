<Vue Application>
 - Vue를 사용하는 방식
  1. 'CDN' 방식
  2. 'NPM' 설치 방식
   -> CDN 방식 이후 진행

 - Vue Application 생성(45p ~ 49p)
  
 - 반응형 상태(데이터)
  - ref()
   - 반응형 상태를 선언하는 함수 (Declaring Reactive State)
   - 반응형을 가지는 참조 변수를 만드는 것
     (ref === reactive reference)

  - ref 함수
   - .value 속성이 있는 ref !!! 객체 !!!로 래핑(wrapping)하여 반환하는 함수
     (객체이기 때문에 key: value 형태로 되어 있음)
   - ref로 선언된 변수의 값이 변경되면, 해당 값을 사용하는 템플릿에서 자동으로 업데이트
   - 인자는 어떠한 타입도 가능

   - 템플릿의 참조에 접근하려면 setpu 함수에서 선언 및 반환 필요
     (객체니까 key이름이 value인 것임.)
     ```
     const app = createApp({
      setup() {
        const message = ref('hello')
        console.log(message) -> 객체가 나온다
        console.log(message.value) -> hello가 나온다.
      }
    })
    ```

    message 객체의 구조는 아래처럼 돼있는 것임
    ```
     {
        value: '어쩌구저쩌구'
     }
     ```
     - ! 편의상 return 후 템플릿에서 ref를 사용할 때는 .value를 작성할 필요 없음 ! (automatically unwrapped)
       (!!! 하지만 실제로는 객체로 반환하기 때문에 .value 해야한다는 것을 잊지말자 !!!)


 - Vue의 기본 구조
  - createApp()에 전달되는 객체는 Vue 컴포넌트
  - 컴포넌트의 상태는 setup() 함수 내에서 선언되어야 하며 객체를 반환해야 함
 
 - 템플릿 렌더링
  - 반환된 객체의 속성은 템플릿에서 사용할 수 있음
  - Mustache syntax(콧수염 구문)를 사용하여 메세지 값을 기반으로 동적 텍스트를 렌더링
  - 콘텐츠는 식별자나 경로에만 국한되지 않으며 유효한 JavaScript 표현식을 사용할 수 있음

 - Event Listeners in Vue
  - 'v-on' directive를 사용하여 DOM 이벤트를 수신할 수 있음
    ('v-on'은 enevt listener임. 자세한건 다음 시간에 진행)
  - 함수 내에서 반응형 변수를 변경하여 구성 요소 상태를 업데이트


 - Template Syntx
  - DOM을 기본 구성 요소 인스턴스의 데이터에 선언적으로 바인딩(Vue Instance와 DOM을 연결)할 수 있는 
    HTML 기반 '템플릿 구문(확장된 문법 제공)'을 사용

  - 종류 (63p ~ 68p, 실습코드 04 보면서 하기)
   1. Text Interpolation
    - 데이터 바인딩의 가장 기본적인 형태
    - 이중 중괄호 구문(콧수염 구문)을 사용
    - 콧수염 구문은 해당 구성 요소 인스턴스의 msg 속성 값으로 대체
    - msg 속성이 변경될 때마다 업데이트 됨

   2. Raw HTML
    - 콧수염 구문은 데이터를 일반 텍스트로 해석하기 때문에 
      실제 HTML을 출력하려면 v-html을 사용해야함

   3. Arrtibute Bindings
    - 콧수염 구문은 HTML 속성 내에서 사용할 수 없기 때문에 v-bind를 사용
    - HTML의 id 속성 값을 vue의 dynamicId 속성과 동기화 되도록 함
    - 바인딩 값이 null이나 undefined인 경우 렌더링 요소에서 제거됨

   4. JavaScript Expressions
    - Vue는 모든 데이터 바인딩 내에서 JavaScript 표현식의 모든 기능을 지원
    - Vue 템플릿에서 JavaScript 표현식을 사용할 수 있는 위치
     1. 콧수염 구문 내부
     2. 모든 directive의 속성 값 ("v-"로 시작하는 특수 속성)

   Expressions 주의사항 (68p 예시)
    - 각 바인딩에는 하나의 단일 표현식만 포함될 수 있음
     - 표현식은 값으로 평가할 수 있는 코드 조각 (return 뒤에 사용할 수 있는 코드여야함)