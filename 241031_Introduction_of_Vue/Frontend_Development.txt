<Frontend Development>
 - 웹 사이트와 웹 애플리케이션의 사용자 인터페이스(UI)와 사용자 경험(UX)을 만들고 디자인하는 것
 -> HTML, CSS, JavaScript 등을 활용하여 사용자가 직접 상호작용하는 부분을 개발

 - Client-side frameworks
  - 클라이언트 측에서 UI와 상호작용을 개발하기 위해 사용되는 JavaScript 기반 프레임워크

  - Client-side frameworks가 필요한 이유
   - 웹에서 하는 일이 많아졌다.
     1. 과거: 단순히 무언가를 읽는 곳 -> 현재: 무언가를 하는 곳
        (ex: 음악 스트리밍, 영화 보기, 라이브 채팅 등 - 10p)
        -> 이처럼 현대적이고 복잡한 대화형 웹 사이트를 "웹 애플리케이션"이라 부름

     2. 다루는 데이터가 많아졌다.
        (ex: SNS에서 친구가 이름을 변경했다면
             -> 친구 목록, 타임라인, 스토리 등 친구 이름이 출력되는 모든 곳이 함께 변경되어야함
             -> 애플리케이션의 기본 데이터를 안정적으로 추적하고 업데이트(렌더링, 추가, 삭제 등)하는 도구가 필요 - 12p)

             => 애플리케이션의 상태를 변경할 때마다 일치하도록 UI를 업데이트해야함
                (Vanilla JS(외부 라이브러리나 프레임워크를 쓰지 않는 순수 JavaScript)만으로는 쉽지 않음, 불필요한 코드가 반복됨)

  - Client-side frameworks의 필요성
   1. 동적이고 반응적인 웹 애플리케이션 개발
    - 실시간 데이터 업데이트

   2. 코드 재사용성 증가
    - 컴포넌트 기반 아키텍처
    - 모듈화된 코드 구조

   3. 개발 생산성 향상
    - 강력한 개발 도구 지원

  *) 우리는 이런 특징을 가진 Client-side frameworks를 이용해 SPA를 개발할 것 이다.


 - SPA (Single Page Application)
  - 단일 페이지에서 동작하는 웹 애플리케이션

  - SPA 작동원리
   - 최초 로드 시 필요한 모든 리소스 다운로드
   - 이후 페이지 갱신에 대해 '필요한 데이터'만을 비동기적으로 전달 받아 화면의 '필요한 부분'만 동적으로 갱신
    - AJAX와 같은 기술을 사용하여 필요한 데이터만 비동기적으로 로드
    - 페이지 전체를 다시 로드 할 필요 없이 필요한 데이터만 서보로부터 가져와서 화면에 표시
   - JavaScript를 사용하여 클라이언트 측에서 동적으로 콘텐츠를 생성하고 업데이트 (CSR 방식)

 - CSR (Client-side Rendering)
  - 클라이언트에서 콘텐츠를 렌더링하는 방식
    (우리는 지금까지 SSR (Sever-side Rendering) 방식을 썼음 (장고에서 모든 그림을 다 그리고 템플릿을 제공했었음))

  - CSR 작동원리
   1. 사용자가 웹사이트에 요청을 보냄
   2. 서버는 최소한의 HTML과 JavaScript 파일을 클라이언트로 전송
   3. 클라이언트는 HTML과 JavaScript를 다운로드 받음
   4. 브라우저가 JavaScript를 실행하여 동적으로 페이지 콘텐츠를 생성
   5. 필요한 데이터는 API를 통해 서버로부터 비동기적으로 가져옴

  - CSR 작동예시 (21p)
   1. 클라이언트는 서버로부터 최소한의 HTML 페이지와 해당 페이지에 필요한 JavaScript를 응답 받음
   2. 그런 다음 클라이언트 측에서 JavaScript를 사용하여 DOM을 업데이트하고 페이지를 렌더링
   3. 이후 서버는 더 이상 HTML을 제공하지 않고 요청에 필요한 데이터만 응답
   -> Google Maps, Facebook, Instagram 등의 서비스에서 페이지 갱신 시 새로고침이 없는 이유

     



   