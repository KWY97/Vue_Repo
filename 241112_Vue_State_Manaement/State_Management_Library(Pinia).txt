<Pnia>
 - Vue의 공식 상태 관리 라이브러리

 - 구성 요소 (22p ~ 29p)
  1. store (중앙 저장소)
   - 모든 컴포는트가 공유하는 상태, 기능 등이 작성됨
   -> defineStore()의 반환 값의 이름(중앙 저장소의 이름)은 use와 store를 사용하는 것을 권장
   -> defineStore()의 첫번째 인자는 애플리케이션 전체에 설쳐 사용하는 store의 고유 ID

  2. state (반응형 상태 (데이터))
   - ref() === state
   - 활용: 각 컴포넌트의 깊이에 관계 없이 store 인스턴스로 state에 접근하여 직접 읽고 쓸 수 있음
           !! 만약 store에 state를 정의하지 않았다면 컴포넌트에서 새로 추가할 수 없음 !!

  3. getters (계산된 값)
   - computed() === getters
   - state에 의존되어 있으므로 state의 변경에 따라 재연산을 할 뿐 status 자체를 조작하진 않음
   - 활용: store의 모든 getters 또한 state처럼 직접 접근할 수 있음

  4. actions (메서드)
   - function() === actions
   - 활용: store의 모든 actions 또한 직접 접근 및 호출할 수 있음
           ! getters와 달리 state 조작, 비동기, API 호출이나 다른 로직을 진행할 수 있음 !

  5. plugin 
   - 애플리케이션의 상태 관리에 필요한 추가 기능을 제공하거나 확장하는 도구나 모듈
   - 애플리케이션의 상태 관리를 더욱 간편하고 유연하게 만들어주며 
     패키지 매니저로 설치 이후 '별도 설정'을 통해 추가 됨

  *) Setup Stoers의 반환 값
   - pinia의 상태들을 사용하려면 반드시 반환해야 함
   -> store에서는 공유하지 않는 private한 상태 속성을 가지지 않음
      (=== private한 상태 속성은 작성하지 않음)

  정리 => Pinia는 store라는 저장소를 가짐
          (여러 스토어 작성 가능, 각각의 이름을 가지기 때문에 기능에 맞게 여러 스토어 작성 가능)

          store는 state, getters, actions으로 이루어지며 각각 ref(), computed(), function()과 동일함


``` App.vue
<script setup>
import HelloWorld from './components/HelloWorld.vue'
import TheWelcome from './components/TheWelcome.vue'

// 1. 중앙 저장소 가져오기 (counter.js라고 쓰지 않아도 됨.)
import { useCounterStore } from './stores/counter';

// 2. 중앙 저장소를 활용해 인스턴스 생성 (useCounterStore는 반환 값이 있음)
const store = useCounterStore()

// 3. 중앙 저장소의 상태를 참조
console.log(store.count)

// [주의] 각 컴포넌트에서는 중앙 저장소에 새로운 상태를 생성할 수 없다.
// store.ssafy = 'ssafy'

// 5-1. action 호출
// store.increment()


</script>

<template>
  <header>
    <div>
      <!-- 4. 중앙 저장소의 getters 참조 -->
      <p>getters: {{ store.doubleCount }}</p>
      <!-- 5-2. actions 호출 -->
      <button @click="store.increment()">++</button>
    </div>
    <img alt="Vue logo" class="logo" src="./assets/logo.svg" width="125" height="125" />

    <div class="wrapper">
      <HelloWorld msg="You did it!" />
    </div>
  </header>

  <main>
    <TheWelcome />
  </main>
</template>

<style scoped>
header {
  line-height: 1.5;
}

.logo {
  display: block;
  margin: 0 auto 2rem;
}

@media (min-width: 1024px) {
  header {
    display: flex;
    place-items: center;
    padding-right: calc(var(--section-gap) / 2);
  }

  .logo {
    margin: 0 2rem 0 0;
  }

  header .wrapper {
    display: flex;
    place-items: flex-start;
    flex-wrap: wrap;
  }
}
</style>
```