<Passing Props>

Props (Properties의 약어)
 - 부모 컴포넌트로부터 자식 컴포넌트로 데이터를 전달하는데 사용되는 속성
 => 부모는 자식에게 데이터는 '전달'(Pass Props)하며, 자식은 자신에게 일어난 일을 부모에게 '알림'(Emit Event)

 - 특징
  - 부모 속성이 업데이트되면 자식으로 전달 되지만 그 반대는 안됨
  - 즉, 자신 컴포넌트 내부에서 props를 변경하려고 시도해서는 안되며 불가능
  - 또한 부모 컴포넌트가 업데이트될 때 마다 이를 사용하는 자식 컴포넌트의 모든 props가 최신 값으로 업데이트됨

  => 부모 컴포넌트에서만 변경하고 이를 내려 받는 자식 컴포넌트는 자연스럽게 갱신

 - One-Way Data Flow
  - 모든 props는 자식 속성과 부모 속성 사이에
    '하향식 단방향 바인딩'(one-way down binding)을 형성

  - 단방향인 이유
   - 하위 컴포넌트가 실수로 상위 컴포넌트의 상태를 변경하여 앱에서의 데이터 흐름을
     이해하기 어렵게 만드는 것을 방지하기 위함

   => 데이터 흐름의 '일관성' 및 '단순화'

 - props 작성 및 선언 (교재: 13p ~ 27p)
  - !! 부모에서 선언한 이름과 자식에서 받는 이름이 다르다. !! (주의)
  - 부모는 HTML(케밥케이스 or 모두 소문자)에 작성하고, 자식은 JavaScript(카멜케이스)로 받기 때문이다.
  - 케밥케이스는 '-'를 기준으로 대문자로 바뀌어서 받는다. 부모에서 모두 소문자로 쓰면 상관없다.
    ``` 부모
    <template>
      <div>
        <ParentChild
          my-msg="message"
        />
       </div>
    </template>
    ```

    ``` 자식
    <script setup>
    // 내려받은 props를 선언
    // 1. 배열 선언 방식
    // defineProps(['myMsg'])

    // 2. 객체 선언 방식
    defineProps({
        myMsg: String
    })
    </script>
    ```

 - props 세부사항 (교재: 29p ~ 34p)
  - 자식 컴포넌트로 전달 시 (-> kebab-case)
  - 선언 및 템플릿 참조시 (-> camleCase)

  - Static props & Dynamic Props
   - v-bind를 사용하여 동적으로 할당된 props를 사용할 수 있음


 - props 활용 (교재: 36p ~ 39p)
  - v-for와 함께 사용하여 반복되는 요소를 props로 전달 가능

