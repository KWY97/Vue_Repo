<정적 & 동적 props 주의사항>
 1. 정적 props로 문자열 "1"을 전달
 ```
 <SomeComponent num-props="1" />
 ```

 2. 동적 props로 숫자 1을 전달 (대부분 동적으로 쓰게 될 것이라고 함)
 ```
 <SomeComponent :num-props=1 />
 ```


<Props & Emit 객체 선언 문법>
 - Props 선언 시 "배열"이 아닌 !! "객체 선언 문법" !! 을 권장하는 이유
  - 컴포넌트를 가독성이 좋게 문서화하데 도움이 됨

  - 다른 개발자가 잘못된 유형을 전달할 때에 브라우저 콘솔에 경고를 출력하도록함
    (실행은 된다. 경고를 띄워줄 뿐임)

  - 추가로 props에 대한 유효성 검사로써 활용가능
  ```
  defineProps({ 
    // 여러 타입 허용 
    propB : [String, Number], 

    // 문자열 필수 
    propC: {
        type: String, 
        required: true
     },  
    // 기본 값을 가지는 숫자형
    propD: {
        type: Numeber,
        default: 10
     },
  ...
  ```

 - emit 이벤트도 "객체 선언 문법"으로 작성 가능
  - emit 이벤트 또한 객체 구문으로 선언된 경우 유효성을 검사할 수 있음
  (오늘 우리는 emit 이벤트를 '배열'로 선언했음)

  ```
  const emit defineEmits({ 
    // 유효성 검사 없음 
    lick: null, 
    // submit 이벤트 유효성 검사 
    submit: ({ email, password }) => { 
        if (email && password) { 
            return true 
            } else { 
                console.warn('submit 이벤트가 옳지 않음') 
                return false 
            } 
        } 
    }) 
    const submitForm = function (email, password) {
        emit('submit', { email, password })
    }
  ```